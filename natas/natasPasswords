0:  natas0
1:  gtVrDuiDfck831PqWsLEZy5gyDz1clto
2:  ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi
3:  sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
4:  Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ
5:  iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq
6:  aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1
7:  7z3hEENjQtflzgnT29q7wAvMNfZdh0i9
8:  DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe
9:  W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl
10: nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu
; <injection>; works for php, especially $_REQUEST$ and passthru
https://hackersonlineclub.com/command-injection-cheatsheet/
exec(), passthru(), shell_exec(), system(), proc_open(), popen(), curl_exec(), curl_multi_exec(), parse_ini_file(), and show_source()
11: U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
just insert the character and then the filename
12: EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3
here's how it works: array > json encode > xor_encrypt > base64 encode > data cookie
we have the data cookie and the array, and base64 encode and json encode are built in functions
so what happens is it takes the array, encodes it for json, passes that as xor along with the xor key, and takes the output and base64 encodes it
the interesting thing about xor is that if a^b=c, then a^c = b. so we now have this:
array > json encoded array (JEA) > c = JEA^key > base64 encoded "c" > data cookie
so base64 encoded c = data cookie
so c = base64 decoded data cookie (64DDC)
so key = JEA^64DDC, and we can get the key, which is a repeating set of characters because of the mod in its instructions in xor
then we want the cookie for some array where show password = yes so we make the array and then pass it through as follows:
array ("showpassword"=>"yes", *blah blah use default as the model for the rest of this*)
pass that through json encode
pass that through xor with the key we found
pass that through base64 encode
and then change the cookie to that output in burp proxy, catch the result, and forward.
TA-DA!
13: jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY
the key is that it just overwrites any tags to be jpg but then we can intercept and change the overwriting back to php
14: Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1
You have to use the Burp repeater; it doesn't like when you mess with turning jpg --> php in the normal proxy
15: AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J
w3 schools--> the login liked x1"or"x2"="x2 because we have quotes before and after the insertion
16: WaIHEacj63wnNIBROHeqi3p9t0m5nhmh
natas16" and password like " ... then brute force it with natas15.py





